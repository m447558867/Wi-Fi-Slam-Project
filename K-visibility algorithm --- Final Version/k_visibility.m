clc
clear all

syms intersect_x intersect_y z_x z_y xx

transmitter_x = 410;
transmitter_y = -500;
vertices = 17;
critical_x = [];
critical_y = [];
critical_number = 1;
critical_positive_x = [];
critical_positive_y = [];
critical_positive_number = 1;
critical_negative_x = [];
critical_negative_y = [];
critical_negative_number = 1;
boundary_number = 1;
boundary_k = [];
boundary_b = [];
q_x = [];
q_y = [];
q_number=1;
q_positive_x = [];
q_positive_y = [];
q_positive_number = 1;
q_negative_x = [];
q_negative_y = [];
q_negative_number = 1;
zx = [];
z_number = 1;
segment_value = 0;
tri0_x = [];
tri0_y = [];
tri1_x = [];
tri1_y = [];
tri2_x = [];
tri2_y = [];
tri3_x = [];
tri3_y = [];
tri4_x = [];
tri4_y = [];
tri0_number = 1;
tri1_number = 1;
tri2_number = 1;
tri3_number = 1;
tri4_number = 1;
ray_k = [];
ray_b = [];
ray_frame_interset_x = [];
ray_frame_interset_y = [];
ray_frame_interset_number = 1;
point_on_ray_x = [];
point_on_ray_y = [];
point_on_ray_number = 1;
outest_point_on_ray_x = [];
outest_point_on_ray_y = [];
outest_point_on_ray_number = 1;
start_quardrant = 0;
end_quardrant = 0;
top_right_x = 1500;
top_right_y = 700;
top_left_x = -500;
top_left_y = 700;
bottom_right_x = 1500;
bottom_right_y = -1300;
bottom_left_x = -500;
bottom_left_y = -1300;
end_count = 1;
start_is_critical = 0;
x = [463 434 600 424 710 702 851 878 454 190 85 100 288 217 352 326 210];
y = -[637 416 383 278 197 384 498 23 14 85 258 476 444 264 264 529 622];
%% boundary determining
for i = 1:1:vertices
    
    if i == vertices
        boundary_k(i) = (y(1)-y(i))/(x(1)-x(i));
        boundary_b(i) = y(i)-boundary_k(i)*x(i);
    else
        boundary_k(i) = (y(i+1)-y(i))/(x(i+1)-x(i));
        boundary_b(i) = y(i)-boundary_k(i)*x(i);
    end
end
%% Rule 1 & Rule2
for i = 1:1:vertices
    %% name and order vertices and special cases
    
    vi_x = x(i);
    vi_y = y(i);
    if i == 1
        vi_minus1_x = x(vertices);
        vi_minus1_y = y(vertices);
        vi_plus1_x = x(i+1);
        vi_plus1_y = y(i+1);
    elseif i == 17
        vi_minus1_x = x(i-1);
        vi_minus1_y = y(i-1);
        vi_plus1_x = x(1);
        vi_plus1_y = y(1);
    else
        vi_minus1_x = x(i-1);
        vi_minus1_y = y(i-1);
        vi_plus1_x = x(i+1);
        vi_plus1_y = y(i+1);
    end
    %% Check for critical vertices
    a = polyfit([vi_x,transmitter_x],[vi_y,transmitter_y],1);
    side1 = sign(((-a(1))*vi_minus1_x + vi_minus1_y+(-a(2)))*((-a(1))*vi_plus1_x+vi_plus1_y+(-a(2))));
    
    if side1 == 1    %same side => critical vertices
        critical_x(critical_number) = vi_x;
        critical_y(critical_number) = vi_y;
        turn_direction = sign((vi_x - vi_minus1_x)*(vi_plus1_y - vi_y) - (vi_y - vi_minus1_y)*(vi_plus1_x-vi_x));
        line_y = a(1)*vi_minus1_x+a(2);
        %% rule1
        if critical_x(critical_number) > transmitter_x    %critical vertex on the right of transimtter
            
            if turn_direction == 1  %CCW (left turn)
                
                if line_y < vi_minus1_y   %point above line (positive)
                    critical_positive_x(critical_positive_number) = vi_x;
                    critical_positive_y(critical_positive_number) = vi_y;
                    critical_positive_number = critical_positive_number +1;
                elseif line_y > vi_minus1_y   %point above line (negative)
                    critical_negative_x(critical_negative_number) = vi_x;
                    critical_negative_y(critical_negative_number) = vi_y;
                    critical_negative_number = critical_negative_number +1;
                end
                
            elseif turn_direction == -1  %CW (right turn)
                if line_y < vi_minus1_y   %point above line (positive)
                    critical_negative_x(critical_negative_number) = vi_x;
                    critical_negative_y(critical_negative_number) = vi_y;
                    critical_negative_number = critical_negative_number +1;
                elseif line_y > vi_minus1_y   %point above line (negative)
                    critical_positive_x(critical_positive_number) = vi_x;
                    critical_positive_y(critical_positive_number) = vi_y;
                    critical_positive_number = critical_positive_number +1;
                end
            end
            ray_x = linspace(transmitter_x, 1000);
            ray_y = a(1)*ray_x+a(2);
            ray_k(critical_number) = a(1);
            ray_b(critical_number) = a(2);
            figure(1);
            plot(ray_x, ray_y,'--b');
            hold on;
            figure(2);
            plot(ray_x, ray_y,'--b');
            hold on;
            %% rule2
            for boundary_number = 1:1:vertices
                E = [(intersect_y == a(1)*intersect_x+a(2)), (intersect_y == boundary_k(boundary_number)*intersect_x+boundary_b(boundary_number))];
                S = solve(E,intersect_x, intersect_y);
                side2 = sign(((-a(1))*vi_minus1_x + vi_minus1_y+(-a(2)))*((-a(1))*x(boundary_number)+y(boundary_number)+(-a(2))));
                
                if boundary_number < vertices   %1-16
                    %segment start at left, S.intersect_x falls btw the segment
                    if x(boundary_number) > x(boundary_number+1)&& S.intersect_x < x(boundary_number) && S.intersect_x > x(boundary_number+1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            %+/-2 not btw critical and transmitter
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                        %segment start at right, S.intersect_x falls btw the segment
                    elseif x(boundary_number) < x(boundary_number+1) && S.intersect_x > x(boundary_number) && S.intersect_x < x(boundary_number+1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                    end
                    
                elseif boundary_number == vertices  %17
                    %segment start at left, S.intersect_x falls btw the segment
                    if x(boundary_number) > x(1)&& S.intersect_x < x(boundary_number) && S.intersect_x > x(1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                        
                    elseif x(boundary_number) < x(1) && S.intersect_x > x(boundary_number) && S.intersect_x < x(1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                    end
                    
                    
                    
                end
            end
            
            
            
        elseif critical_x(critical_number) < transmitter_x    %critical vertex on the left of transimtter
            %% rule1
            if turn_direction == 1  %CCW (left turn)
                
                if line_y < vi_minus1_y   %point above line (positive)
                    critical_negative_x(critical_negative_number) = vi_x;
                    critical_negative_y(critical_negative_number) = vi_y;
                    critical_negative_number = critical_negative_number +1;
                elseif line_y > vi_minus1_y   %point above line (negative)
                    critical_positive_x(critical_positive_number) = vi_x;
                    critical_positive_y(critical_positive_number) = vi_y;
                    critical_positive_number = critical_positive_number +1;
                end
                
            elseif turn_direction == -1  %CW (right turn)
                if line_y < vi_minus1_y   %point above line (positive)
                    critical_positive_x(critical_positive_number) = vi_x;
                    critical_positive_y(critical_positive_number) = vi_y;
                    critical_positive_number = critical_positive_number +1;
                elseif line_y > vi_minus1_y   %point above line (negative)
                    critical_negative_x(critical_negative_number) = vi_x;
                    critical_negative_y(critical_negative_number) = vi_y;
                    critical_negative_number = critical_negative_number +1;
                end
            end
            ray_x = linspace(-1000, transmitter_x);
            ray_y = a(1)*ray_x+a(2);
            ray_k(critical_number) = a(1);
            ray_b(critical_number) = a(2);
            figure(1);
            plot(ray_x, ray_y,'--b');
            hold on;
            figure(2);
            plot(ray_x, ray_y,'--b');
            hold on;
            %% rule2
            for boundary_number = 1:1:vertices
                E = [(intersect_y == a(1)*intersect_x+a(2)), (intersect_y == boundary_k(boundary_number)*intersect_x+boundary_b(boundary_number))];
                S = solve(E,intersect_x, intersect_y);
                side2 = sign(((-a(1))*vi_minus1_x + vi_minus1_y+(-a(2)))*((-a(1))*x(boundary_number)+y(boundary_number)+(-a(2))));
                
                if boundary_number < vertices   %1-16
                    %segment start at left, S.intersect_x falls btw the segment
                    if x(boundary_number) > x(boundary_number+1)&& S.intersect_x < x(boundary_number) && S.intersect_x > x(boundary_number+1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            %+/-2 not btw critical and transmitter
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                        %segment start at right, S.intersect_x falls btw the segment
                    elseif x(boundary_number) < x(boundary_number+1) && S.intersect_x > x(boundary_number) && S.intersect_x < x(boundary_number+1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                    end
                    
                elseif boundary_number == vertices  %17
                    %segment start at left, S.intersect_x falls btw the segment
                    if x(boundary_number) > x(1)&& S.intersect_x < x(boundary_number) && S.intersect_x > x(1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                        
                    elseif x(boundary_number) < x(1) && S.intersect_x > x(boundary_number) && S.intersect_x < x(1)
                        %critical on top of transmitter, S.intersect_y should be higher too
                        if critical_y(critical_number) > transmitter_y && S.intersect_y > critical_y(critical_number)
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                            %critical below the transmitter, S.intersect_y should be below too
                        elseif critical_y(critical_number) < transmitter_y && S.intersect_y < transmitter_y
                            
                            q_x(q_number) = S.intersect_x;
                            q_y(q_number) = S.intersect_y;
                            
                            if side2 == 1    %same side => negative2
                                q_negative_x(q_negative_number) = q_x(q_number);
                                q_negative_y(q_negative_number) = q_y(q_number);
                                q_negative_number = q_negative_number+1;
                            elseif side2 == -1   %opposite side => positive2
                                q_positive_x(q_positive_number) = q_x(q_number);
                                q_positive_y(q_positive_number) = q_y(q_number);
                                q_positive_number = q_positive_number+1;
                            end
                            
                            q_number = q_number + 1;
                        end
                    end
                    
                    
                    
                end
            end
            
        end
        critical_number = critical_number + 1;
    end
end
%% Find start point
transmiter_horizon_x = linspace(transmitter_x, 1000);
transmiter_horizon_y = transmitter_y+0*transmiter_horizon_x;
plot(transmiter_horizon_x, transmiter_horizon_y,'--r');
hold on;
% detect boundary and horizontal cross section
for i = 1:1:vertices
    
    E = -transmitter_y+ boundary_k(i)*z_x+boundary_b(i) ==0;
    S = solve(E,z_x);
    
    if S > transmitter_x
        S
        i
        if i == vertices
            x(i)
            x(1)
            %intersect falls btw two boundary points 1. start fromn right 2. start from left
            if x(i) > x(1) && S < x(i) && S > x(1)
                zx(z_number) = S;
                z_number = z_number +1;
            elseif x(i) < x(1) && S > x(i) && S <x(1)
                zx(z_number) = S;
                z_number = z_number +1;
            end
            
        elseif i < vertices
            x(i)
            x(i+1)
            %intersect falls btw two boundary points
            if x(i) > x(i+1) && S < x(i)  && S > x(i+1)
                zx(z_number) = S;
                z_number = z_number +1;
            elseif x(i) < x(i+1) && S > x(i) && S < x(i+1)
                zx(z_number) = S;
                z_number = z_number +1;
            end
            
        end
        zx
        S - min(zx)
        if S - min(zx) < 0.1
            boundary_start = i
        end
    end
end
% plot horizontal line and point z
zy = transmitter_y;
plot(min(zx), zy,'.','markersize',15);
text(min(zx), zy,'0','fontsize',15);
hold on;
%% Summing up & Pratition
%partition
upper_frame = 700;
bottom_frame = -1300;
left_frame = -500;
right_frame = 1500;
syms xx
% find outest boundary point on ray
for i = 1:1:(critical_number - 1)
    point_on_ray_number = 1;
    %check for critical positive
    for n = 1:1:(critical_positive_number-1)
        if abs(critical_positive_y(n) - ray_k(i) * critical_positive_x(n) - ray_b(i)) <0.1
            point_on_ray_x(point_on_ray_number) = critical_positive_x(n);
            point_on_ray_y(point_on_ray_number) = critical_positive_y(n);
            point_on_ray_number = point_on_ray_number + 1;
        end
    end
    %check for critical negative
    for n = 1:1:(critical_negative_number-1)
        if abs(critical_negative_y(n) - ray_k(i) * critical_negative_x(n) - ray_b(i)) <0.1
            point_on_ray_x(point_on_ray_number) = critical_negative_x(n);
            point_on_ray_y(point_on_ray_number) = critical_negative_y(n);
            point_on_ray_number = point_on_ray_number + 1;
        end
    end
    %check for q positive
    for n = 1:1:(q_positive_number-1)
        if abs(q_positive_y(n) - ray_k(i) * q_positive_x(n) - ray_b(i)) <0.1
            point_on_ray_x(point_on_ray_number) = q_positive_x(n);
            point_on_ray_y(point_on_ray_number) = q_positive_y(n);
            point_on_ray_number = point_on_ray_number + 1;
        end
    end
    %check for q negative
    for n = 1:1:(q_negative_number-1)
        if abs(q_negative_y(n) - ray_k(i) * q_negative_x(n) - ray_b(i)) <0.1
            point_on_ray_x(point_on_ray_number) = q_negative_x(n);
            point_on_ray_y(point_on_ray_number) = q_negative_y(n);
            point_on_ray_number = point_on_ray_number + 1;
        end
    end
    %check for outest point
    if critical_y > transmitter_y;
        [outest_point_on_ray_y(outest_point_on_ray_number),k] = max(point_on_ray_y);
        outest_point_on_ray_x(outest_point_on_ray_number)= point_on_ray_x(k);
        outest_point_on_ray_number = outest_point_on_ray_number + 1;
        point_on_ray_x = [];
        point_on_ray_y = [];
    end
end
segment_value = 0;
% point move from boundary_start towards boundary(vertices)
for i = boundary_start:1:vertices
    sum_critical_positive = [];
    sum_critical_positive_number = 1;
    sum_critical_negative = [];
    sum_critical_negative_number = 1;
    sum_q_positive = [];
    sum_q_positive_number = 1;
    sum_q_negative = [];
    sum_q_negative_number = 1;
    %% i not equal to last segment and not equal to the start segment
    if i~=vertices && i~= boundary_start
        i;
        %% determine the moving right direction
        if x(i) < x(i+1)
            %% check all critical positive points in the moving right direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) >= x(i) && critical_positive_x(n) < x(i+1) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving right direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) >= x(i) && critical_negative_x(n) < x(i+1) && abs(boundary_y - critical_negative_y(n))<0.1);
                    sum_critical_negative(sum_critical_negative_number) = critical_negative_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving right direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) >= x(i) && q_positive_x(n) < x(i+1) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving right direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) >= x(i) && q_negative_x(n) < x(i+1) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving right direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative);
            sort(sum_q_positive);
            sort(sum_q_negative);
            min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
            min_point = min(min_points);
            finish = isempty(min_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i);
                point1_y = y(i);
                point2_x = x(i+1);
                point2_y = y(i+1)   ;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                hold on;
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= min_point
                        point1_x = x(i);
                        point1_y = y(i);
                        point2_x = min_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2             ;
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3                 ;
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4                      ;
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                        end
                    end
                    % check point class and do summing
                    if min_point == min(sum_critical_positive)
                        passed_segment_value = segment_value;
                        segment_value = segment_value + 1;
                        start_segment_value = segment_value;
                        sum_critical_positive(1) = [];
                    elseif min_point == min(sum_critical_negative)
                        passed_segment_value = segment_value;
                        segment_value = segment_value - 1;
                        start_segment_value = segment_value;
                        sum_critical_negative(1) = [];
                    elseif min_point == min(sum_q_positive)
                        passed_segment_value = segment_value;
                        segment_value = segment_value + 2;
                        start_segment_value = segment_value;
                        sum_q_positive(1) = [];
                    elseif min_point == min(sum_q_negative)
                        passed_segment_value = segment_value;
                        segment_value = segment_value -2;
                        start_segment_value = segment_value;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = min_point;
                    min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];;
                    min_point = min(min_points);
                    finish = isempty(min_point);
                    sum_point_next = min_point                                            ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = x(i+1);
                        point2_y = y(i+1);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                   point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                end
            end
        end
        %% determine the moving left direction
        if x(i) > x(i+1)
            %% check all critical positive points in the moving left direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) > x(i+1) && critical_positive_x(n) <= x(i) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving left direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) > x(i+1) && critical_negative_x(n) <= x(i) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_negative_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving left direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) > x(i+1) && q_positive_x(n) <= x(i) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving left direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) > x(i+1) && q_negative_x(n) <= x(i) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving left direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative);
            sort(sum_q_positive);
            sort(sum_q_negative);
            max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
            max_point = max(max_points);
            finish = isempty(max_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i);
                point1_y = y(i);
                point2_x = x(i+1);
                point2_y = y(i+1)   ;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                hold on;
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= max_point
                        point1_x = x(i);
                        point1_y = y(i);
                        point2_x = max_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                        end
                    end
                    % check point class and do summing
                    if max_point == max(sum_critical_positive)
                        segment_value = segment_value + 1;
                        sum_critical_positive(1) = [];
                    elseif max_point == max(sum_critical_negative)
                        segment_value = segment_value - 1;
                        sum_critical_negative(1) = [];
                    elseif max_point == max(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif max_point == max(sum_q_negative)
                        segment_value = segment_value -2;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = max_point;
                    max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
                    max_point = max(max_points);
                    finish = isempty(max_point);
                    sum_point_next = max_point  ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = x(i+1);
                        point2_y = y(i+1);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                   point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                end
            end
        end
    end
    %% i equal to the start segment
    if i == boundary_start
        i;
        %% determine the moving right direction
        if x(i) < x(i+1)
            %% check all critical positive points in the moving right direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) >= min(zx) && critical_positive_x(n) < x(i+1) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving right direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) >= min(zx) && critical_negative_x(n) < x(i+1) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_positive_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving right direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) >= min(zx) && q_positive_x(n) < x(i+1) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving right direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) >= min(zx) && q_negative_x(n) < x(i+1) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving right direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative)
            sort(sum_q_positive);
            sort(sum_q_negative);
            min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
            min_point = min(min_points);
            finish = isempty(min_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = min(zx);
                point1_y = transmitter_x;
                point2_x = x(i+1);
                point2_y = y(i+1)   ;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                               point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= min_point
                        point1_x = min(zx);
                        point1_y = transmitter_x;
                        point2_x = min_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                    end
                    % check point class and do summing
                    if min_point == min(sum_critical_positive)
                        segment_value = segment_value + 1;
                        sum_critical_positive(1) = [];
                    elseif min_point == min(sum_critical_negative)
                        segment_value = segment_value - 1;
                        sum_critical_negative(1) = [];
                    elseif min_point == min(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif min_point == min(sum_q_negative)
                        segment_value = segment_value -2;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = min_point;
                    min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
                    min_point = min(min_points);
                    finish = isempty(min_point);
                    sum_point_next = min_point          ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)  ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)      ;
                        point2_x = x(i+1);
                        point2_y = y(i+1);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                    point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                    
                end
            end
        end
        %% determine the moving left direction
        if x(i) > x(i+1)
            %% check all critical positive points in the moving left direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) > x(i+1) && critical_positive_x(n) <= min(zx) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving left direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) > x(i+1) && critical_negative_x(n) <= min(zx) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_negative_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving left direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) > x(i+1) && q_positive_x(n) <= min(zx) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving left direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) > x(i+1) && q_negative_x(n) <= min(zx) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving left direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative)
            sort(sum_q_positive);
            sort(sum_q_negative);
            max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
            max_point = max(max_points);
            finish = isempty(max_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = min(zx);
                point1_y = transmitter_y;
                point2_x = x(i+1);
                point2_y = y(i+1)   ;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= max_point;
                        point1_x = min(zx);
                        point1_y = transmitter_y;
                        point2_x = max_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                    end
                    % check point class and do summing
                    if max_point == max(sum_critical_positive)
                        segment_value = segment_value + 1;
                        sum_critical_positive(1) = [];
                    elseif max_point == max(sum_critical_negative)
                        segment_value = segment_value - 1;
                        sum_critical_negative(1) = [];
                    elseif max_point == max(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif max_point == max(sum_q_negative)
                        segment_value = segment_value -2;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = max_point;
                    max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
                    max_point = max(max_points);
                    finish = isempty(max_point);
                    sum_point_next = max_point                ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)     ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)   ;
                        point2_x = x(i+1);
                        point2_y = y(i+1);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                    point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                end
            end
        end
    end
    %% i equal to the vertices segment
    if i == vertices
        i;
        %% determine the moving right direction
        if x(i) < x(1)
            %% check all critical positive points in the moving right direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) >= x(i) && critical_positive_x(n) < x(1) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving right direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) >= x(i) && critical_negative_x(n) < x(1) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_positive_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving right direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) >= x(i) && q_positive_x(n) < x(1) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving right direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) >= x(i) && q_negative_x(n) < x(1) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving right direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative);
            sort(sum_q_positive);
            sort(sum_q_negative);
            min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
            min_point = min(min_points);
            finish = isempty(min_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i);
                point1_y = y(i);
                point2_x = x(1);
                point2_y = y(1)   ;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= min_point
                        point1_x = x(i);
                        point1_y = y(i);
                        point2_x = min_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                    % check point class and do summing
                    if min_point == min(sum_critical_positive)
                        segment_value = segment_value + 1;
                        sum_critical_positive(1) = [];
                    elseif min_point == min(sum_critical_negative)
                        segment_value = segment_value - 1;
                        sum_critical_negative(1) = [];
                    elseif min_point == min(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif min_point == min(sum_q_negative)
                        segment_value = segment_value -2;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = min_point;
                    min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
                    min_point = min(min_points);
                    finish = isempty(min_point);
                    sum_point_next = min_point    ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)   ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)      ;
                        point2_x = x(1);
                        point2_y = y(1);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                    point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                    end
                end
            end
        end
        %% determine the moving left direction
        if x(i) > x(1)
            %% check all critical positive points in the moving left direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) > x(1) && critical_positive_x(n) <= x(i) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving left direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) > x(1) && critical_negative_x(n) <= x(i) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_negative_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving left direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) > x(1) && q_positive_x(n) <= x(i) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving left direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) > x(1) && q_negative_x(n) <= x(i) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving left direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative)
            sort(sum_q_positive);
            sort(sum_q_negative);
            max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
            max_point = max(max_points)
            finish = isempty(max_point)
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i)
                point1_y = y(i)
                point2_x = x(1)
                point2_y = y(1)
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= max_point
                        point1_x = x(i)
                        point1_y = y(i)
                        point2_x = max_point
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                    % check point class and do summing
                    if max_point == max(sum_critical_positive)
                        segment_value = segment_value + 1
                        sum_critical_positive(1) = [];
                    elseif max_point == max(sum_critical_negative)
                        segment_value = segment_value - 1
                        sum_critical_negative(1) = [];
                    elseif max_point == max(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif max_point == max(sum_q_negative)
                        segment_value = segment_value -2
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = max_point;
                    max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
                    max_point = max(max_points)
                    finish = isempty(max_point);
                    sum_point_next = max_point
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)
                        point2_x = sum_point_next
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)
                        point2_x = x(1)
                        point2_y = y(1)
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                    point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                        end
                    end
                end
            end
        end
    end
end
% point move from boundary 1 towards boundary_start (finishin a loop)
for i = 1:1:boundary_start
    sum_critical_positive = [];
    sum_critical_positive_number = 1;
    sum_critical_negative = [];
    sum_critical_negative_number = 1;
    sum_q_positive = [];
    sum_q_positive_number = 1;
    sum_q_negative = [];
    sum_q_negative_number = 1;
    %% i not equal to last segment and not equal to the start segment
    if i~= boundary_start
        i;
        %% determine the moving right direction
        if x(i) < x(i+1)
            %% check all critical positive points in the moving right direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) >= x(i) && critical_positive_x(n) < x(i+1) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n)
                    sum_critical_positive_number = sum_critical_positive_number + 1
                end
            end
            %% check all critical negative points in the moving right direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) >= x(i) && critical_negative_x(n) < x(i+1) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_positive_x(n)
                    sum_critical_negative_number = sum_critical_negative_number + 1
                end
            end
            %% check all q positive points in the moving right direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) >= x(i) && q_positive_x(n) < x(i+1) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n)
                    sum_q_positive_number = sum_q_positive_number + 1
                end
            end
            %% check all q negative points in the moving right direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) >= x(i) && q_negative_x(n) < x(i+1) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n)
                    sum_q_negative_number = sum_q_negative_number + 1
                end
            end
            %% sort summing points in order in the moving right direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative)
            sort(sum_q_positive);
            sort(sum_q_negative);
            min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
            min_point = min(min_points)
            finish = isempty(min_point)
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i);
                point1_y = y(i);
                point2_x = x(i+1);
                point2_y = y(i+1);
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= min_point
                        point1_x = x(i);
                        point1_y = y(i);
                        point2_x = min_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                       point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                    end
                    % check point class and do summing
                    if min_point == min(sum_critical_positive)
                        segment_value = segment_value + 1
                        sum_critical_positive(1) = [];
                    elseif min_point == min(sum_critical_negative)
                        segment_value = segment_value - 1
                        sum_critical_negative(1) = [];
                    elseif min_point == min(sum_q_positive)
                        segment_value = segment_value + 2
                        sum_q_positive(1) = [];
                    elseif min_point == min(sum_q_negative)
                        segment_value = segment_value -2
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = min_point;
                    min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
                    min_point = min(min_points);
                    finish = isempty(min_point);
                    sum_point_next = min_point;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i) ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i) ;
                        point2_x = x(i+1);
                        point2_y = y(i+1);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                    point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                end
            end
        end
        %% determine the moving left direction
        if x(i) > x(i+1)
            %% check all critical positive points in the moving left direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) > x(i+1) && critical_positive_x(n) <= x(i) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving left direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) > x(i+1) && critical_negative_x(n) <= x(i) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_negative_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving left direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) > x(i+1) && q_positive_x(n) <= x(i) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving left direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) > x(i+1) && q_negative_x(n) <= x(i) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving left direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative);
            sort(sum_q_positive);
            sort(sum_q_negative);
            max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
            max_point = max(max_points);
            finish = isempty(max_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i);
                point1_y = y(i);
                point2_x = x(i+1);
                point2_y = y(i+1)   ;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= max_point
                        point1_x = x(i);
                        point1_y = y(i);
                        point2_x = max_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                    end
                    % check point class and do summing
                    if max_point == max(sum_critical_positive)
                        segment_value = segment_value + 1;
                        sum_critical_positive(1) = [];
                    elseif max_point == max(sum_critical_negative)
                        segment_value = segment_value - 1;
                        sum_critical_negative(1) = [];
                    elseif max_point == max(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif max_point == max(sum_q_negative)
                        segment_value = segment_value -2;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = max_point;
                    max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
                    max_point = max(max_points);
                    finish = isempty(max_point);
                    sum_point_next = max_point    ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = x(i+1);
                        point2_y = y(i+1);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                    point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                    
                end
            end
        end
    end
    %% i equal to the start segment
    if i == boundary_start
        i;
        %% determine the moving right direction
        if x(i) < x(i+1)
            %% check all critical positive points in the moving right direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n)  >= x(i) && critical_positive_x(n) < min(zx) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving right direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) >= x(i) && critical_negative_x(n) < min(zx) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_positive_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving right direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) >= x(i) && q_positive_x(n) < min(zx) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving right direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) >= x(i) && q_negative_x(n) < min(zx) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving right direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative);
            sort(sum_q_positive);
            sort(sum_q_negative);
            min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
            min_point = min(min_points);
            finish = isempty(min_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i);
                point1_y = y(i);
                point2_x = min(zx);
                point2_y = transmitter_y;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= min_point
                        point1_x = x(i);
                        point1_y = y(i);
                        point2_x = min_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                    end
                    % check point class and do summing
                    if min_point == min(sum_critical_positive)
                        segment_value = segment_value + 1;
                        sum_critical_positive(1) = [];
                    elseif min_point == min(sum_critical_negative)
                        segment_value = segment_value - 1
                        sum_critical_negative(1) = [];
                    elseif min_point == min(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif min_point == min(sum_q_negative)
                        segment_value = segment_value -2;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = min_point;
                    min_points =[min(sum_critical_positive) min(sum_critical_negative) min(sum_q_positive) min(sum_q_negative)];
                    min_point = min(min_points);
                    finish = isempty(min_point);
                    sum_point_next = min_point                                            ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = min(zx);
                        point2_y = transmitter_y;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                   point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                    end
                end
            end
        end
        %% determine the moving left direction
        if x(i) > x(i+1)
            %% check all critical positive points in the moving left direction segment
            for n = 1:1:(critical_positive_number-1)
                boundary_y = boundary_k(i) * critical_positive_x(n) + boundary_b(i);
                % check if critical positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical positive point
                if(critical_positive_x(n) > min(zx) && critical_positive_x(n) <= x(i) && abs(boundary_y - critical_positive_y(n))<0.1)
                    sum_critical_positive(sum_critical_positive_number) = critical_positive_x(n);
                    sum_critical_positive_number = sum_critical_positive_number + 1;
                end
            end
            %% check all critical negative points in the moving left direction segment
            for n = 1:1:(critical_negative_number-1)
                boundary_y = boundary_k(i) * critical_negative_x(n) + boundary_b(i);
                % check if critical negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum critical negative point
                if(critical_negative_x(n) > min(zx) && critical_negativee_x(n) <= x(i) && abs(boundary_y - critical_negative_y(n))<0.1)
                    sum_critical_negative(sum_critical_negative_number) = critical_negative_x(n);
                    sum_critical_negative_number = sum_critical_negative_number + 1;
                end
            end
            %% check all q positive points in the moving left direction segment
            for n = 1:1:(q_positive_number-1)
                boundary_y = boundary_k(i) * q_positive_x(n) + boundary_b(i);
                % check if q positive points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q positive point
                if(q_positive_x(n) > min(zx) && q_positive_x(n) <= x(i+1) && abs(boundary_y - q_positive_y(n))<0.1)
                    sum_q_positive(sum_q_positive_number) = q_positive_x(n);
                    sum_q_positive_number = sum_q_positive_number + 1;
                end
            end
            %% check all q negative points in the moving left direction segment
            for n = 1:1:(q_negative_number-1)
                boundary_y = boundary_k(i) * q_negative_x(n) + boundary_b(i);
                % check if q negative points falls in the boundary
                % xvalues and the coresponding y match the boundary
                % function =====> sum q negative point
                if(q_negative_x(n) > min(zx) && q_negative_x(n) <= x(i+1) && abs(boundary_y - q_negative_y(n))<0.1)
                    sum_q_negative(sum_q_negative_number) = q_negative_x(n);
                    sum_q_negative_number = sum_q_negative_number + 1;
                end
            end
            %% sort summing points in order in the moving left direction segment
            sort(sum_critical_positive);
            sort(sum_critical_negative);
            sort(sum_q_positive);
            sort(sum_q_negative);
            max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
            max_point = max(max_points);
            finish = isempty(max_point);
            j = 1;
            % no summing point in the segment
            if j == 1 && logical(finish) ==  1
                point1_x = x(i);
                point1_y = y(i);
                point2_x = min(zx);
                point2_y = transmitter_y ;
                figure(2);
                text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                % partition
                if segment_value == 0
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(3);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 1
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 2
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 3
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                elseif segment_value == 4
                    tri_x = [transmitter_x, point1_x, point2_x];
                    tri_y = [transmitter_y, point1_y, point2_y];
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                end
                                point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                % summing point in segment
            elseif logical(finish) ~=  1
                % boundary start is not a summing point, print segment
                % value btw them
                while logical(finish) ~=  1
                    if j == 1 && x(i) ~= max_point
                        point1_x = x(i);
                        point1_y = y(i);
                        point2_x = max_point;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i)  ;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        % partition
                        if segment_value == 0
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(3);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 1
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(4);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 2
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(5);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 3
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(6);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        elseif segment_value == 4
                            tri_x = [transmitter_x, point1_x, point2_x];
                            tri_y = [transmitter_y, point1_y, point2_y];
                            figure(7);
                            patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                        end
                                        point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
                end
                    end
                    % check point class and do summing
                    if max_point == max(sum_critical_positive)
                        segment_value = segment_value + 1;
                        sum_critical_positive(1) = [];
                    elseif max_point == max(sum_critical_negative)
                        segment_value = segment_value - 1;
                        sum_critical_negative(1) = [];
                    elseif max_point == max(sum_q_positive)
                        segment_value = segment_value + 2;
                        sum_q_positive(1) = [];
                    elseif max_point == max(sum_q_negative)
                        segment_value = segment_value -2;
                        sum_q_negative(1) = [];
                    end
                    sum_point_passed = max_point;
                    max_points =[max(sum_critical_positive) max(sum_critical_negative) max(sum_q_positive) max(sum_q_negative)];
                    max_point = max(max_points);
                    finish = isempty(max_point);
                    sum_point_next = max_point                                            ;
                    % still need to sum in the segment
                    if logical(finish) ~=  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = sum_point_next;
                        point2_y = boundary_k(i) * point2_x + boundary_b(i);
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                        % finish summing
                    elseif logical(finish) ==  1
                        point1_x = sum_point_passed;
                        point1_y = boundary_k(i) * point1_x + boundary_b(i)                       ;
                        point2_x = min(zx);
                        point2_y = transmitter_y;
                        figure(2);
                        text((point1_x + point2_x)/2,(point1_y + point2_y)/2,sprintf('%d',segment_value)','Color','red','fontsize',15);
                        j = j + 1;
                    end
                    % partition
                    if segment_value == 0
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(3);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 1
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 2
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 3
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    elseif segment_value == 4
                        tri_x = [transmitter_x, point1_x, point2_x];
                        tri_y = [transmitter_y, point1_y, point2_y];
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                    end
                                   point1_x
                % find ray_frame interset of start
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if start point is outtest point on ray
                    if abs(point1_x - outest_point_on_ray_x(k))<0.1 && abs(point1_y - outest_point_on_ray_y(k))<0.1
                        k
                        % strart poin on the first quardrant
                        if point1_x > transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the second quardrant
                        elseif point1_x < transmitter_x && point1_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the third quardrant
                        elseif point1_x < transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            start_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % strart poin on the fourth quardrant
                        elseif point1_x > transmitter_x && point1_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            start_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_start_x & interset_start_y
                        tri_start_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_start_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        start_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point1_x - critical_x(o))<0.1 && abs(point1_y - critical_y(o))<0.1
                                 start_is_critical = 1
                             end
                        end
                    end
                end
                point2_x
                % find ray_frame interset of end
                for k=1:1:(outest_point_on_ray_number-1)
                    % check if end point is outtest point on ray
                    if abs(point2_x - outest_point_on_ray_x(k))<0.1 && abs(point2_y - outest_point_on_ray_y(k))<0.1
                        k
                        % end poin on the first quardrant
                        if point2_x > transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 1
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the second quardrant
                        elseif point2_x < transmitter_x && point2_y > transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == upper_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 2
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 < upper_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the third quardrant
                        elseif point2_x < transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * left_frame + ray_b(k) == xx)
                            end_quardrant = 3
                            % check intersect
                            if s1 > left_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                            % end poin on the fourth quardrant
                        elseif point2_x > transmitter_x && point2_y < transmitter_y
                            s1 = solve(ray_k(k) * xx + ray_b(k) == bottom_frame)
                            s2 = solve(ray_k(k) * right_frame + ray_b(k) == xx)
                            end_quardrant = 4
                            % check intersect
                            if s1 < right_frame
                                ray_frame_interset_x(ray_frame_interset_number) = s1
                                ray_frame_interset_y(ray_frame_interset_number) = ray_k(k) * s1 + ray_b(k)
                            elseif s2 > bottom_frame
                                ray_frame_interset_y(ray_frame_interset_number) = s2
                                ray_frame_interset_x(ray_frame_interset_number) = (s2-ray_b(k))/ray_k(k)
                            end
                        end
                        % assign interset_end_x & interset_end_y
                        tri_end_x = ray_frame_interset_x(ray_frame_interset_number)
                        tri_end_y = ray_frame_interset_y(ray_frame_interset_number)
                        segment_value
                        ray_frame_interset_number = ray_frame_interset_number +1;
                        end_is_critical = 0
                        for o=1:1:(critical_number-1)
                             if abs(point2_x - critical_x(o))<0.1 && abs(point2_y - critical_y(o))<0.1
                                 end_is_critical = 1  
                             end
                        end
                        if end_count ==1
                            end_initial_quardrant = end_quardrant
                            end_quardrant = 0
                            tri_end_initial_x = tri_end_x
                            tri_end_initial_y = tri_end_y
                            end_initial_is_critical = end_is_critical
                            end_is_critical = 0
                            end_value = segment_value
                        end
                        end_count = end_count + 1
                    end
                end
                % found trianle start & end & quardrants
            if start_quardrant ~= 0 && end_quardrant ~= 0
                if start_is_critical ==1 && end_is_critical == 1
                    segment_value = segment_value -1
                end
                end_quardrant - start_quardrant
                % start and end quardrants are next to each other
                if (end_quardrant - start_quardrant) ==1 || (end_quardrant - start_quardrant) ==0 || (end_quardrant - start_quardrant) ==-3
                    tri_x = [transmitter_x, tri_start_x, tri_end_x];
                    tri_y = [transmitter_y, tri_start_y, tri_end_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by one quardrant
                elseif (end_quardrant - start_quardrant) ==2 || (end_quardrant - start_quardrant) ==-2
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, tri_end_x];
                        tri2_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri2_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, tri_end_x];
                        tri2_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                    % two quardrants are seperated by two quardrant
                elseif (end_quardrant - start_quardrant) ==3 || (end_quardrant - start_quardrant) ==-1
                    if start_quardrant==1
                        tri1_x = [transmitter_x, tri_start_x, top_left_x];
                        tri1_y = [transmitter_y, tri_start_y, top_left_y];
                        tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                        tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                        tri3_x = [transmitter_x, bottom_left_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_leftt_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==2
                        tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                        tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                        tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                        tri3_x = [transmitter_x, bottom_right_x, tri_end_x];
                        tri3_y = [transmitter_y, bottom_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==3
                        tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                        tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                        tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                        tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                        tri3_x = [transmitter_x, top_right_x, tri_end_x];
                        tri3_y = [transmitter_y, top_right_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 4
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif start_quardrant==4
                        tri1_x = [transmitter_x, tri_start_x, top_right_x];
                        tri1_y = [transmitter_y, tri_start_y, top_right_y];
                        tri2_x = [transmitter_x, top_right_x, top_left_x];
                        tri2_y = [transmitter_y, top_right_y, top_left_y];
                        tri3_x = [transmitter_x, top_left_x, tri_end_x];
                        tri3_y = [transmitter_y, top_left_y, tri_end_y];
                        if segment_value == 0
                            figure(4);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 1
                            figure(5);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 2
                            figure(6);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        elseif segment_value == 3
                            figure(7);
                            patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                            patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                            hold on;
                            start_quardrant = 0
                            end_quardrant = 0
                        end
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_quardrant = 0
                    end
                end
            end
                end
            end
        end
    end
end

        if start_quardrant ~= 0 && end_initial_quardrant ~= 0
            if start_is_critical ==1 && end_initial_is_critical == 1
                segment_value = end_value -1
            end
            end_initial_quardrant - start_quardrant
            % start and end quardrants are next to each other
            if (end_initial_quardrant - start_quardrant) ==1 || (end_initial_quardrant - start_quardrant) ==0 || (end_initial_quardrant - start_quardrant) ==-3
                tri_x = [transmitter_x, tri_start_x, tri_end_initial_x];
                tri_y = [transmitter_y, tri_start_y, tri_end_initial_y];
                if segment_value == 0
                    figure(4);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    start_quardrant = 0
                    end_initial_quardrant = 0
                elseif segment_value == 1
                    figure(5);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    start_quardrant = 0
                    end_initial_quardrant = 0
                elseif segment_value == 2
                    figure(6);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    start_quardrant = 0
                    end_initial_quardrant = 0
                elseif segment_value == 3
                    figure(7);
                    patch(tri_x,tri_y,'b','FaceAlpha',.5,'EdgeColor','none');
                    hold on;
                    start_quardrant = 0
                    end_initial_quardrant = 0
                elseif segment_value == 4
                    start_quardrant = 0
                    end_initial_quardrant = 0
                end
                % two quardrants are seperated by one quardrant
            elseif (end_initial_quardrant - start_quardrant) ==2 || (end_initial_quardrant - start_quardrant) ==-2
                if start_quardrant==1
                    tri1_x = [transmitter_x, tri_start_x, top_left_x];
                    tri1_y = [transmitter_y, tri_start_y, top_left_y];
                    tri2_x = [transmitter_x, top_left_x, tri_end_initial_x];
                    tri2_y = [transmitter_y, top_left_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif start_quardrant==2
                    tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                    tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                    tri2_x = [transmitter_x, bottom_left_x, tri_end_initial_x];
                    tri2_y = [transmitter_y, bottom_left_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif start_quardrant==3
                    tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                    tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                    tri2_x = [transmitter_x, bottom_right_x, tri_end_initial_x];
                    tri2_y = [transmitter_y, bottom_right_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif start_quardrant==4
                    tri1_x = [transmitter_x, tri_start_x, top_right_x];
                    tri1_y = [transmitter_y, tri_start_y, top_right_y];
                    tri2_x = [transmitter_x, top_right_x, tri_end_initial_x];
                    tri2_y = [transmitter_y, top_right_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif segment_value == 4
                    start_quardrant = 0
                    end_initial_quardrant = 0
                end
                % two quardrants are seperated by two quardrant
            elseif (end_initial_quardrant - start_quardrant) ==3 || (end_initial_quardrant - start_quardrant) ==-1
                if start_quardrant==1
                    tri1_x = [transmitter_x, tri_start_x, top_left_x];
                    tri1_y = [transmitter_y, tri_start_y, top_left_y];
                    tri2_x = [transmitter_x, top_left_x, bottom_left_x];
                    tri2_y = [transmitter_y, top_left_y, bottom_left_y];
                    tri3_x = [transmitter_x, bottom_left_x, tri_end_initial_x];
                    tri3_y = [transmitter_y, bottom_leftt_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold o0n;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif start_quardrant==2
                    tri1_x = [transmitter_x, tri_start_x, bottom_left_x];
                    tri1_y = [transmitter_y, tri_start_y, bottom_left_y];
                    tri2_x = [transmitter_x, bottom_left_x, bottom_right_x];
                    tri2_y = [transmitter_y, bottom_left_y, bottom_right_y];
                    tri3_x = [transmitter_x, bottom_right_x, tri_end_initial_x];
                    tri3_y = [transmitter_y, bottom_right_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif start_quardrant==3
                    tri1_x = [transmitter_x, tri_start_x, bottom_right_x];
                    tri1_y = [transmitter_y, tri_start_y, bottom_right_y];
                    tri2_x = [transmitter_x, bottom_right_x, top_right_x];
                    tri2_y = [transmitter_y, bottom_right_y, top_right_y];
                    tri3_x = [transmitter_x, top_right_x, tri_end_initial_x];
                    tri3_y = [transmitter_y, top_right_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                             hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                              hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 4
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif start_quardrant==4
                    tri1_x = [transmitter_x, tri_start_x, top_right_x];
                    tri1_y = [transmitter_y, tri_start_y, top_right_y];
                    tri2_x = [transmitter_x, top_right_x, top_left_x];
                    tri2_y = [transmitter_y, top_right_y, top_left_y];
                    tri3_x = [transmitter_x, top_left_x, tri_end_initial_x];
                    tri3_y = [transmitter_y, top_left_y, tri_end_initial_y];
                    if segment_value == 0
                        figure(4);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                               hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 1
                        figure(5);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 2
                        figure(6);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    elseif segment_value == 3
                        figure(7);
                        patch(tri1_x,tri1_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        patch(tri2_x,tri2_y,'b','FaceAlpha',.5,'EdgeColor','none');                                hold on;
                        patch(tri3_x,tri3_y,'b','FaceAlpha',.5,'EdgeColor','none');
                        hold on;
                        start_quardrant = 0
                        end_initial_quardrant = 0
                    end
                elseif segment_value == 4
                    start_quardrant = 0
                    end_initial_quardrant = 0
                end
            end
        end
%% plot
figure(1);
pgon = polyshape(x,y);
plot(pgon);
hold on;
plot(transmitter_x, transmitter_y,'.r','markersize',15);
hold on;
plot(critical_x, critical_y,'.','markersize',15);
hold on;
axis([0 1000 -800 200]);
text(critical_positive_x,critical_positive_y,'+1','fontsize',10);
text(critical_negative_x,critical_negative_y,'-1','fontsize',10);
text(q_positive_x,q_positive_y,'+2','fontsize',10);
text(q_negative_x,q_negative_y,'-2','fontsize',10);
plot(q_x, q_y,'.','markersize',15);
title('Critical Points and Ray Intersects');
hold on;
figure(2);
title('K-Visibility of Each Segment');
axis([0 1000 -800 200]);
pgon = polyshape(x,y);
plot(pgon);
hold on;
plot(transmitter_x, transmitter_y,'.r','markersize',15);
hold on;
plot(min(zx), zy,'.','markersize',15);
text(min(zx), zy,'0','fontsize',15);
hold on;
figure(3);
title('K = 0');
plot(transmitter_x, transmitter_y,'.r','markersize',15);
axis([0 1000 -800 200]);
pgon = polyshape(x,y);
plot(pgon,'FaceColor','red','FaceAlpha',0.1);
hold on;
figure(4);
plot(transmitter_x, transmitter_y,'.r','markersize',15);
title('K = 1');
axis([0 1000 -800 200]);
pgon = polyshape(x,y);
plot(pgon,'FaceColor','red','FaceAlpha',0.1);
hold on;
figure(5);
plot(transmitter_x, transmitter_y,'.r','markersize',15);
title('K = 2');
axis([0 1000 -800 200]);
pgon = polyshape(x,y);
plot(pgon,'FaceColor','red','FaceAlpha',0.1);
hold on;
figure(6);
plot(transmitter_x, transmitter_y,'.r','markersize',15);
title('K = 3');
axis([0 1000 -800 200]);
pgon = polyshape(x,y);
plot(pgon,'FaceColor','red','FaceAlpha',0.1);
hold on;
figure(7);
plot(transmitter_x, transmitter_y,'.r','markersize',15);
title('K = 4');
axis([0 1000 -800 200]);
pgon = polyshape(x,y);
plot(pgon,'FaceColor','red','FaceAlpha',0.1);
hold on;
hold off;